#!/usr/bin/env python
PACKAGE = "contact_grasp"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

class_enum = gen.enum([gen.const("apple",      int_t, 47, "apple object"),
                       gen.const("cup",        int_t, 41, "apple object"),
                       gen.const("banana",      int_t, 46, "apple object"),
                       gen.const("orange",      int_t, 49, "apple object"),
                       gen.const("carrot",      int_t, 51, "apple object"),
                        ],
                        "An enum for segmentation class")

gen.add("iou_threshold",    double_t,    0, "IOU threshold for non maximum suppression", 0.8,  0, 1)
gen.add("confidence_threshold",    double_t,    0, "Confidence threshold", 0.15,  0, 1)
gen.add("classes",    int_t,    0, "Classes to detect", 47 ,41, 51, edit_method=class_enum)
gen.add("segmentation_type",    str_t,    0, "Segmentation type", "instance")
gen.add("device",    str_t,    0, "Device to use [cpu or cuda]", "cpu")
gen.add("segWindowMinX",    double_t,    0, "Segmentation window min x", 320,  0, 1280)
gen.add("segWindowMaxX",    double_t,    0, "Segmentation window max x", 1280,  0, 1280)
gen.add("segWindowMinY",    double_t,    0, "Segmentation window min y", 0,  0, 780)
gen.add("segWindowMaxY",    double_t,    0, "Segmentation window max y", 780,  0, 780)
gen.add("publish_segmap",    bool_t,    0, "Publish segmentation image", True)

size_enum = gen.enum([ gen.const("nano",      str_t, "n", "Nano"),
                       gen.const("small",      str_t, "s", "Small"),
                       gen.const("medium",     str_t, "m", "Medium"),
                       gen.const("large",      str_t, "l", "Large"),
                       gen.const("Exxtra_large", str_t, "x", "XXL")],
                     "An enum to set size")

gen.add("model_size", str_t, 0, "A size parameter which is edited via an enum", "n", edit_method=size_enum)
exit(gen.generate(PACKAGE, "segmentationConfig", "segmentation"))
